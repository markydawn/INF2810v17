* Opplegg gruppetime 31.03.17

** Spørsmål fra forrige time: Er ikke ~member?~ innebygget?
~member?~ er ikke innebygget, men en prosedyre ~member~ er. Denne virker ikke på samme måte som ~member?~ dere har implementert i obligen. ~member?~ fra obligen tar inn tre parametere: et predikat den skal sjekke mot (f.eks ~eq?~), noe den skal lete etter, og en liste den skal lete i. Finner den et element som tilfredstiller predikatet, så returneres ~#t~, hvis ikke ~#f~. Den innebydge ~member~ derimot tar imot to parametere: noe den skal lete etter og en liste den skal lete i. Hvis elementet er i lista, så returneres lista  fra og med dette elementet, hvis ikke ~#f~. Predikatet den tester mot er ~equal?~. Eksempler:

#+BEGIN_SRC scheme
  (member 'a '(a b c d))
  ;; => (a b c d)

  (member 3 (list 1 2 3 4))
  ;; => (3 4)

  (member 64 (list 1 2 3 5 3))
  ;; => #f

  (member test (list (list 1 2 3 4) 1 2 3 4)) ;; tester for sublisten (1 2 3 4)
  ;; => ((1 2 3 4) 1 2 3 4)

#+END_SRC


Dersom vi skulle ønske å bruke ~eq?~ som test isteden, så kan vi bruke ~memq~. La oss se hvordan eksemplene over ser ut med ~memq~:

#+BEGIN_SRC scheme
  (memq 'a '(a b c d))
  ;; => (a b c d)

  (memq 3 (list 1 2 3 4))
  ;; => (3 4)

  (memq 64 (list 1 2 3 5 3))
  ;; => #f

  (memq test (list (list 1 2 3 4) 1 2 3 4)) 
  ;; => #f
#+END_SRC


Noen vil kanskje lure på hvorfor siste kallet returnerer ~#f~. Dette er rett og slett fordi listen ~(1 2 3 4)~ ikke er det samme som "objektet" ~test~.

Du kan også lese om disse i [[http://groups.csail.mit.edu/mac/ftpdir/scheme-reports/r5rs-html/r5rs_8.html#IDX294][R5RS-specen]] (som det blant annet er link til på kurssidene). Nå skal det sies at jeg ikke er veldig flink til å sjekke specen bortsett fra den [[http://groups.csail.mit.edu/mac/ftpdir/scheme-reports/r5rs-html/r5rs_14.html#SEC88][alfabetiske oversikten]] (som også finnes på kurssidene), men dette pleier å holde.


** Repitisjon fra forelesning: Assosiasjons-tabeller (prekode oblig 2b og innebyggede R5RS prosedyrer) 
*** Generelt om assosiasjonslister
Før vi går noe videre kan det kanskje være interessant å se hvordan assosiasjonslister ser ut i Scheme, og hva de er. En assosiasjonsliste er liste over nøkkel-verdi-par,  noe vi også kan kalle en tabell. Hvert par består av en nøkkel i førsteposisjonen (~car~) og en verdi i andreposisjonen (~cdr~). Dette kan kanskje virke noe uklart, så la oss se på noen eksempler:

#+BEGIN_SRC scheme 
  ;; Assosiasjonsliste med nøkler:
  ;; a (verdi: 1), b (verdi: 2), c (verdi: 3)
  ;; Slik ser assosiasjonslisten ut:
  (define my-table '((a . 1) (b . 2) (c .3)))

  ;; La oss oss si at vi ønsker å hente ut b:
  (assoc 'b my-table)
  ;; => (b . 2)

  ;; Ønsker vi verdien av dette, så kan dette enkelt hentes ut med vanlige listeoperasjoner
  (cdr (assoc 'b my-table))
#+END_SRC 

Hva er denne prosedyren ~assoc~? Må vi lage den selv? Nei, dette trenger vi ikke. ~assoc~ er nemlig [[http://groups.csail.mit.edu/mac/ftpdir/scheme-reports/r5rs-html/r5rs_8.html#IDX297][innebygget i R5RS]]. Det den gjør er rett og slett å lete etter etter en nøkkel i nøkkel-verdi-parene med ~equal?~ som test, og dersom dette stemmer returneres nøkkel-verdi-paret. Hvis ikke returneres ~#f~. En implementasjon er presentert i [[http://www.uio.no/studier/emner/matnat/ifi/INF2810/v17/materialer/09_tabeller.pdf][forelesningen 16. mars]]:

#+BEGIN_SRC scheme
  (define (assoc key records) 
    (cond ((null? records) #f)
	  ((equal? key (caar records)) (car records))
	  (else (assoc key (cdr records)))))
#+END_SRC

Hvorfor er dette nyttig? Nå som vi har gått vekk ren funksjonell programmering, og dermed har destruktive operasjoner, så kan vi lage slike lister for å ta vare på data (f.eks i oblig 2b memoisering hint-hint ;) ). Vi skal i neste seksjon se litt på prekoden og strukturen i prekoden, hvor vi blant annet kommer til det å sette inn data.

*** Prekoden
Nå skal vi se litt på prekoden for oblig 2b (som er mye mindre enn 2a sin). La oss først se på første prosedyre ~make-table~:
#+BEGIN_SRC scheme 
  (define (make-table)
    (list '*table*))
#+END_SRC

Denne lager rett og slett bare en liste med symbolet ~*table*~. Dette er rett og slett for å vise at vi arbeider med en tabell-struktur. Hvis vi f.eks hadde ønsket å lage en sjekk for om vi har en tabell kan vi bruke ~(eq? '*table* (car my-table))~ (hvor ~my-table~ er tabellen vi ønsker å teste om tilhører får datastruktur). 

Prekoden er laget slik at vi setter inn et element om nøkkelen ikke finnes i tabellen, og modifiserer verdien om det allerede eksisterer. Vi kan tenke oss at første steg da blir å sjekke om elementet finnes i tabellen. La oss se på koden for ~insert!~ (~!~ fordi det er en destruktiv prosedyre):

#+BEGIN_SRC scheme
  (define (insert! key value table)
    (let ((record (assoc key (cdr table)))) ;; finner elementet i tabellen (cdr fordi første element er *table*)
      (if record                            ;; sjekker om elementet finnes
	  (set-cdr! record value)           ;; om elementet finnes modifeseres bare neste-pekeren til nøkkel-verdi-paret (altså verdien)
	  (set-cdr! table 
		    (cons (cons key value) (cdr table))))))
  ;; i siste linje setter vi neste-pekeren til tabellen til å være en ny cons-celle bestående av
  ;;  et nøkkel-verdi par, og den gamle neste-pekeren i tabellen.
#+END_SRC

Nå mangler bare en operasjon. Siden det ville blitt litt tungvint å bruke ~(cdr (assoc key (cdr my-table)))~ hver gang vi skal hente ut en verdi (vi må i tillegg sjekke at elementet finnes), så kan vi lage en prosedyre (også fra prekoden):

#+BEGIN_SRC scheme
  (define (lookup key table)
    (let ((record (assoc key (cdr table)))) ;; henter ut nøkkelverdi-par som i stad (eller #f om det ikke eksisterer)
      (and record (cdr record))))           ;; hvis nøkkel-verdi paret eksisterer, så hent ut verdien
#+END_SRC

Merk at alle disse prosedyrene er i [[http://www.uio.no/studier/emner/matnat/ifi/INF2810/v17/oppgaver/prekode2b.scm][prekoden]], og at dere ikke trenger å implementere dem selv (eller lime inn herfra). For noen kan kanskje denne gjennomgangen virke litt teskje-pedagogikk, men for andre er listeoperasjoner litt vrient. 

Skal prøve å ta noen boks og peker diagrammer i gruppetimen for å vise denne strukturen. Om jeg husker å ta bilde av dem, så vil de bli limt inn her.


*** Lite hint til memoiseringsoppgaven
Et lite hint til memoiseringsoppgaven finnes i [[https://github.com/vegarsti/INF2810V17/tree/master/10][Vegard sitt github repo]] (vi gjennomgår også dette i timen). Vi titter også raskt på ~apply~-eksemplene i timen.


** Repitisjon (og litt "after-oblig" for oblig 2a) 
*** set-car! og set-cdr!
Vi har allerede blitt introdusert til ~set!~ for å endre bindinger, som er en special form. Vi har også liste-varianter av dette for å destruktivt endre elementer i an parstruktur. 

#+BEGIN_SRC scheme 
  (define test (list 1 2 3 4))

  (set-car! test 3)
  test
  ;; => (3 2 3 4)

  (set-cdr! (cdr test) 5)
  test
  ;; => (3 2 . 5)

  (set-cdr! (cdr test) test)
  test
  ;; => #0=(3 2 . #0#)
  ;; betyr at listen består av 3 og 2, og peker tilbake på seg selv
  ;; altså en sirkulær liste
#+END_SRC

*** append
~append~ er en utrolig viktig prosedyre på mange måter, men med mye misbrukspotensial. With great power comes great responsibility! Som flere andre prosedyrer som er nevnt, er denne innebygget i R5RS. En mulig implementasjon kan ser slik ut (fra ukeoppgaver):

#+BEGIN_SRC scheme
  (define (append lst1 lst2)
    (if (null? lst1)
	lst2
	(cons (car lst1) (append (cdr lst1) lst2))))
#+END_SRC

Det denne gjør er rett og slett å ta imot to parametere (lister), kopierer hele første-listen og setter siste-pekeren i denne til å være liste nummer 2. Hvor er misbrukspotensialet hen? Jo, mange velger å bruke denne for å ikke bygge opp lister i feil rekkefølge ved halerekursjon (tar selvkritikk for at jeg ikke har vært veldig tydelig på dette før). Ikke føl deg truffet om du har gjort dette, ALLE gjør denne feilen i starten. Når jeg hadde kurset gjorde jeg også den helt til jeg så et eksempel som dette som forklarte det. ~append~ er så enkelt i forhold til å bygge opp selv. Fra [[http://folk.uio.no/haakomol/inf2810/ressurser/listerekursjon.html][liste-rekursjons-guiden]] har vi følgende prosedyre:

#+BEGIN_SRC scheme  
  (define (add-n-iter items n)
      (define (iter in out)
	(if (null? in)
            (reverse out)
            (iter (cdr in) (cons (+ (car in) n) out))))
      (iter items '()))
#+END_SRC

Det denne gjør er rett og slett å å legge til et tall ~n~ på hvert element i en liste. Vi ser her at vi bygger opp listen med ~cons~ i reversert rekkefølge, og bruker ~reverse~ for å reversere den til slutt (Oppgave: Prøv å fjern ~reverse~-kallet og prøv å endre rekkefølgen i ~cons~, hva skjer?). Dette er den mest effektive måten å bygge listen på i en hale-rekursiv prosedyre. Vi bygger opp listen med konstant tid i hvert steg (noe som gir oss lineær tid), og reverserer til slutt på lineær tid (lineær tid totalt => O(2n) = O(n)). Med ~append~ vil vi få kvadratisk tid siden vi i hvert steg vil gå gjennom hva vi har samlet opp hittil en gang.

*** length
Vi gjorde dette forrige time, men kan fortsatt være greit å se litt på. Det ~length~ gjør er rett og slett å gå gjennom hele lista den tar imot, og øke en teller med en for hvert element. Prosedyren er innebygget i R5RS, og en rekursiv prosedyre (opphav til rekursiv prosess) ser slik ut (fra forelesning):

#+BEGIN_SRC scheme
  (define (length items)
    (if (null? items)
	0
	(+ 1 (length (cdr items)))))
#+END_SRC 

Hvorfor tar jeg opp denne? Den er selvfølgelig nyttig å vite om, men det er en annen grunn til at jeg tar opp dette. Mange studenter velger å bruke denne i basistilfellet når vi rekurserer lister, f.eks ~(zero? (length lst))~, ~(= (length lst) 1)~ osv. (hvor ~lst~ er liste-variablen vår). Dette gir uønsket kompleksitet, da vi i hvert steg må gå gjennom en liste en hel gang (med ett og ett element mindre hver gang. F.eks en add-n-iter med dette som basistilfelle:

#+BEGIN_SRC scheme 
  (define (add-n-iter items n)
      (define (iter in out)
	(if (zero (length in))
            (reverse out)
            (iter (cdr in) (cons (+ (car in) n) out))))
      (iter items '()))
#+END_SRC

I hvert steg går vi nå gjennom hele listen, og sjekker om lengden er null. Dette blir som sagt utrolig ueffektivt.



** Håper dere ble med på kahooten!
[[https://play.kahoot.it/#/k/aefe6351-79a4-4aef-bca8-524a71e4679a][Kanksje dere vil se på den igjen?]]
